package com.theater.beans.MovieShow;
 
import DataBases.LoadOptions;
import static com.theater.beans.MovieShow.MovieShow.idOptions;
import static dashboard.dashboard.parentView;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;

@RequestScoped
@ManagedBean(name = "DAOMovieShow")
public class DAOMovieShow {

    public static String currentView;

    public DAOMovieShow() {
        currentView = "home";
          
       MovieShowsList();
        
        
    }
 private String movieName = null;

    public String switch_to_Add() {
        String path = "/MovieShow/CreateMovieShow";
        title = "Add New MovieShow";
        currentView = "createMovieShow";
        buttonText = "Save";
        MovieShow obj = new MovieShow();
          LoadOptions.main(null);
        obj.setIdOptions(idOptions);
        sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
        sessionMap.put("MovieShow", obj);
        return path;
    }

    public void search(String s){
        MovieShow dbm= new MovieShow();
        dbm.setMovieName(s);
        dbm=dbMovieShow.findindDatabase(dbm);
        MovieShowsList = new ArrayList();
        MovieShowsList.add(dbm);
        
    }

    public void setMovieName(String movieName) {
        this.movieName = movieName;
    }

    public String getMovieName() {
        return movieName;
    }
    // Used to fetch record to update  
    public static boolean isEdit = false;

    public String switch_to_Edit(MovieShow obj, int id) {
        String path = "/MovieShow/CreateMovieShow";
        currentView = "createMovieShow";
        buttonText = "Update";
        title = "Update MovieShow";
        isEdit = true;
        obj.setShowId(id);
        sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
        sessionMap.put("MovieShow", obj);
        return path;
    }

    public String goBack() {
         
         if (parentView.equals("/UserHome")) {
            return "/UserHome";
        } else if (parentView.equals("/Home")){
            return "/home";
        }else{
            return "/Home";
        }
      
    }

    public String goBackward() {
        return "/MovieShow/MovieShowMain";

    }

    public String getButtonText() {
        return buttonText;
    }

    public String getTittle() {
        return title;
    }
    ArrayList MovieShowsList;
    public static Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
    DBMovieShow dbMovieShow = new DBMovieShow();
    public static String buttonText, title;

   
    public ArrayList MovieShowsList() {
        try {
            MovieShowsList = dbMovieShow.loadData();

        } catch (Exception e) {
            System.out.println(e);
        }
        return MovieShowsList;
    }
// Used to save record  

    public String save(MovieShow obj) {
        int result = 0;
        if (isEdit == false) {
            dbMovieShow.insertObject(obj);

        } else {
            dbMovieShow.updateObject(obj);
            isEdit = false;
        }

        if (result != 0) {
            return "MovieShowMain.xhtml?faces-redirect=true";
        } else {
            return "/MovieShow/CreateMovieShow";
        }

    }

// Used to delete  record  
    public void delete(MovieShow m) {
        dbMovieShow.deleteObject(m);
    }

//Generated by Map
    public static Map<String, Integer> coffee2Value= new LinkedHashMap<>();
    
    public void setMovieShowsList(ArrayList MovieShowsList) {
        this.MovieShowsList = MovieShowsList;
    }

    public ArrayList getMovieShowsList() {
        return MovieShowsList;
    }

}
